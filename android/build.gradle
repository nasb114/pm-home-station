apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.2"
    defaultConfig {
        applicationId "pmstation.android"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    splits {
        density {
            enable true
            exclude 'ldpi', 'tvdpi'
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.google.firebase:firebase-crash:11.6.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.github.felHR85:UsbSerial:4.5'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation project(':core')
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.2'
}

if (project.file('google-services.json').exists()) {
    apply plugin: 'com.google.gms.google-services'
}

ext.additionalDensities = ['xhdpi': ['280'], 'xxhdpi': ['420', '400', '360'], 'xxxhdpi': ['560']]
import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    // modify manifests to add in-between densities, workaround for skipping them in split
    variant.outputs.each { output ->
        if (output.getFilter(OutputFile.DENSITY) != null && project.ext.additionalDensities.containsKey(output.getFilter(OutputFile.DENSITY))) {
            output.processManifest.doFirst {
                def manifestFile = new File(project.buildDir, "intermediates/manifests/density/" +
                        variant.buildType.name + "/" + output.getFilter(OutputFile.DENSITY) + "/AndroidManifest.xml")
                def manifestText = manifestFile.text
                for (String density : project.ext.additionalDensities.get(output.getFilter(OutputFile.DENSITY))) {
                    manifestText = manifestText.replaceAll("</compatible-screens>",
                            "<screen android:screenSize=\"small\" android:screenDensity=\"${density}\" />\n" +
                            "<screen android:screenSize=\"large\" android:screenDensity=\"${density}\" />\n" +
                            "<screen android:screenSize=\"xlarge\" android:screenDensity=\"${density}\" />\n" +
                            "<screen android:screenSize=\"normal\" android:screenDensity=\"${density}\" />\n</compatible-screens>")
                }
                manifestFile.text = manifestText
            }
        }
    }
}

// map for the version code
ext.versionCodes = [all: 1, mdpi: 2, hdpi: 3, xhdpi: 4, xxhdpi: 5, xxxhdpi: 6]
android.applicationVariants.all { variant ->
    // assign different version code for each output
    variant.outputs.each { output ->
        def key = output.getFilter(OutputFile.DENSITY) == null ? "all" : output.getFilter(OutputFile.DENSITY)
        output.versionCodeOverride = project.ext.versionCodes.get(key) * 100 + android.defaultConfig.versionCode
    }
}

